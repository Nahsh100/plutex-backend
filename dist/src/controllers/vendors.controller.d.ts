import { VendorsService } from '../services/vendors.service';
import { CreateVendorDto } from '../dto/create-vendor.dto';
import { UpdateVendorDto } from '../dto/update-vendor.dto';
export declare class VendorsController {
    private readonly vendorsService;
    constructor(vendorsService: VendorsService);
    create(createVendorDto: CreateVendorDto): Promise<{
        products: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            isFeatured: boolean;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            reviewCount: number;
            price: number;
            originalPrice: number | null;
            brand: string;
            images: import("@prisma/client/runtime/library").JsonValue | null;
            specifications: import("@prisma/client/runtime/library").JsonValue | null;
            availability: import(".prisma/client").$Enums.ProductAvailability;
            stockQuantity: number;
            sku: string | null;
            weight: number | null;
            dimensions: string | null;
            vendorId: string;
            categoryId: string;
            soldCount: number;
        }[];
    } & {
        id: string;
        name: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        website: string | null;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        businessType: string | null;
        taxId: string | null;
        isVerified: boolean;
        status: import(".prisma/client").$Enums.VendorStatus;
        rating: number;
        reviewCount: number;
        logo: string | null;
        location: string | null;
    }>;
    findAll(): Promise<({
        products: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            isFeatured: boolean;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            reviewCount: number;
            price: number;
            originalPrice: number | null;
            brand: string;
            images: import("@prisma/client/runtime/library").JsonValue | null;
            specifications: import("@prisma/client/runtime/library").JsonValue | null;
            availability: import(".prisma/client").$Enums.ProductAvailability;
            stockQuantity: number;
            sku: string | null;
            weight: number | null;
            dimensions: string | null;
            vendorId: string;
            categoryId: string;
            soldCount: number;
        }[];
    } & {
        id: string;
        name: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        website: string | null;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        businessType: string | null;
        taxId: string | null;
        isVerified: boolean;
        status: import(".prisma/client").$Enums.VendorStatus;
        rating: number;
        reviewCount: number;
        logo: string | null;
        location: string | null;
    })[]>;
    getStats(): Promise<{
        totalVendors: number;
        verifiedVendors: number;
        activeVendors: number;
        pendingVendors: number;
    }>;
    getVendorDashboardStats(id: string): Promise<{
        totalProducts: number;
        activeProducts: number;
        totalOrders: number;
        totalRevenue: number;
        pendingOrders: number;
        shippedOrders: number;
        deliveredOrders: number;
        totalCustomers: number;
    }>;
    getVendorOrders(id: string): Promise<({
        order: {
            user: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                phone: string;
                address: string;
                city: string;
                state: string;
                zipCode: string;
                country: string;
                status: import(".prisma/client").$Enums.UserStatus;
                dateOfBirth: Date | null;
                gender: string | null;
                role: import(".prisma/client").$Enums.UserRole;
                marketingConsent: boolean;
                password: string | null;
                refreshToken: string | null;
                googleId: string | null;
                emailVerified: boolean;
            };
            items: ({
                product: {
                    id: string;
                    name: string;
                    description: string;
                    isActive: boolean;
                    isFeatured: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                    rating: number;
                    reviewCount: number;
                    price: number;
                    originalPrice: number | null;
                    brand: string;
                    images: import("@prisma/client/runtime/library").JsonValue | null;
                    specifications: import("@prisma/client/runtime/library").JsonValue | null;
                    availability: import(".prisma/client").$Enums.ProductAvailability;
                    stockQuantity: number;
                    sku: string | null;
                    weight: number | null;
                    dimensions: string | null;
                    vendorId: string;
                    categoryId: string;
                    soldCount: number;
                };
            } & {
                id: string;
                price: number;
                sku: string | null;
                quantity: number;
                orderId: string;
                productId: string;
                vendorOrderId: string | null;
            })[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            orderNumber: string;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            paymentMethod: string;
            shippingMethod: string;
            shippingAddress: import("@prisma/client/runtime/library").JsonValue;
            trackingNumber: string | null;
            notes: string | null;
            userId: string;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            productId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        commissionRate: number;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        vendorId: string;
        orderId: string;
        vendorEarnings: number;
        commissionAmount: number;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
    })[]>;
    getVendorRevenueStats(id: string): Promise<{
        month: string;
        revenue: number;
    }[]>;
    getVendorSalesByCategory(id: string): Promise<{
        name: string;
        value: number;
        amount: number;
    }[]>;
    findOne(id: string): Promise<{
        products: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            isFeatured: boolean;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            reviewCount: number;
            price: number;
            originalPrice: number | null;
            brand: string;
            images: import("@prisma/client/runtime/library").JsonValue | null;
            specifications: import("@prisma/client/runtime/library").JsonValue | null;
            availability: import(".prisma/client").$Enums.ProductAvailability;
            stockQuantity: number;
            sku: string | null;
            weight: number | null;
            dimensions: string | null;
            vendorId: string;
            categoryId: string;
            soldCount: number;
        }[];
    } & {
        id: string;
        name: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        website: string | null;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        businessType: string | null;
        taxId: string | null;
        isVerified: boolean;
        status: import(".prisma/client").$Enums.VendorStatus;
        rating: number;
        reviewCount: number;
        logo: string | null;
        location: string | null;
    }>;
    update(id: string, updateVendorDto: UpdateVendorDto): Promise<{
        products: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            isFeatured: boolean;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            reviewCount: number;
            price: number;
            originalPrice: number | null;
            brand: string;
            images: import("@prisma/client/runtime/library").JsonValue | null;
            specifications: import("@prisma/client/runtime/library").JsonValue | null;
            availability: import(".prisma/client").$Enums.ProductAvailability;
            stockQuantity: number;
            sku: string | null;
            weight: number | null;
            dimensions: string | null;
            vendorId: string;
            categoryId: string;
            soldCount: number;
        }[];
    } & {
        id: string;
        name: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        website: string | null;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        businessType: string | null;
        taxId: string | null;
        isVerified: boolean;
        status: import(".prisma/client").$Enums.VendorStatus;
        rating: number;
        reviewCount: number;
        logo: string | null;
        location: string | null;
    }>;
    remove(id: string): Promise<void>;
}

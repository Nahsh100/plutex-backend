import { ProductsService } from '../services/products.service';
import { CreateProductDto } from '../dto/create-product.dto';
import { UpdateProductDto } from '../dto/update-product.dto';
export declare class ProductsController {
    private readonly productsService;
    constructor(productsService: ProductsService);
    create(createProductDto: CreateProductDto): Promise<{
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            productId: string;
            userId: string;
            comment: string;
        }[];
    } & {
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
        soldCount: number;
    }>;
    findAll(): Promise<({
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            productId: string;
            userId: string;
            comment: string;
        }[];
    } & {
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
        soldCount: number;
    })[]>;
    getStats(): Promise<{
        totalProducts: number;
        activeProducts: number;
        featuredProducts: number;
        outOfStockProducts: number;
    }>;
    findByCategory(categoryId: string): Promise<({
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
    } & {
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
        soldCount: number;
    })[]>;
    findByVendor(vendorId: string): Promise<{
        soldCount: number;
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
        orderItems: {
            id: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            productId: string;
            vendorOrderId: string | null;
        }[];
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
    }[]>;
    findOne(id: string): Promise<{
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            productId: string;
            userId: string;
            comment: string;
        }[];
        orderItems: {
            id: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            productId: string;
            vendorOrderId: string | null;
        }[];
    } & {
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
        soldCount: number;
    }>;
    update(id: string, updateProductDto: UpdateProductDto): Promise<{
        category: {
            id: string;
            name: string;
            description: string | null;
            slug: string;
            image: string | null;
            metaTitle: string | null;
            metaDescription: string | null;
            isActive: boolean;
            isFeatured: boolean;
            sortOrder: number;
            createdAt: Date;
            updatedAt: Date;
        };
        vendor: {
            id: string;
            name: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            website: string | null;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            businessType: string | null;
            taxId: string | null;
            isVerified: boolean;
            status: import(".prisma/client").$Enums.VendorStatus;
            rating: number;
            reviewCount: number;
            logo: string | null;
            location: string | null;
        };
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            productId: string;
            userId: string;
            comment: string;
        }[];
    } & {
        id: string;
        name: string;
        description: string;
        isActive: boolean;
        isFeatured: boolean;
        createdAt: Date;
        updatedAt: Date;
        rating: number;
        reviewCount: number;
        price: number;
        originalPrice: number | null;
        brand: string;
        images: import("@prisma/client/runtime/library").JsonValue | null;
        specifications: import("@prisma/client/runtime/library").JsonValue | null;
        availability: import(".prisma/client").$Enums.ProductAvailability;
        stockQuantity: number;
        sku: string | null;
        weight: number | null;
        dimensions: string | null;
        vendorId: string;
        categoryId: string;
        soldCount: number;
    }>;
    remove(id: string): Promise<{
        message: string;
    }>;
}

import { UsersService } from '../services/users.service';
import { CreateUserDto } from '../dto/create-user.dto';
import { UpdateUserDto } from '../dto/update-user.dto';
export declare class UsersController {
    private readonly usersService;
    constructor(usersService: UsersService);
    create(createUserDto: CreateUserDto): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            orderNumber: string;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            paymentMethod: string;
            shippingMethod: string;
            shippingAddress: import("@prisma/client/runtime/library").JsonValue;
            trackingNumber: string | null;
            notes: string | null;
            userId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        status: import(".prisma/client").$Enums.UserStatus;
        dateOfBirth: Date | null;
        gender: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        marketingConsent: boolean;
        password: string | null;
        refreshToken: string | null;
        googleId: string | null;
        emailVerified: boolean;
    }>;
    findAll(): Promise<({
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            orderNumber: string;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            paymentMethod: string;
            shippingMethod: string;
            shippingAddress: import("@prisma/client/runtime/library").JsonValue;
            trackingNumber: string | null;
            notes: string | null;
            userId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        status: import(".prisma/client").$Enums.UserStatus;
        dateOfBirth: Date | null;
        gender: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        marketingConsent: boolean;
        password: string | null;
        refreshToken: string | null;
        googleId: string | null;
        emailVerified: boolean;
    })[]>;
    getStats(): Promise<{
        totalUsers: number;
        activeUsers: number;
        customers: number;
        vendors: number;
        totalRevenue: number;
    }>;
    findOne(id: string): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            orderNumber: string;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            paymentMethod: string;
            shippingMethod: string;
            shippingAddress: import("@prisma/client/runtime/library").JsonValue;
            trackingNumber: string | null;
            notes: string | null;
            userId: string;
        }[];
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            userId: string;
            comment: string;
            productId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        status: import(".prisma/client").$Enums.UserStatus;
        dateOfBirth: Date | null;
        gender: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        marketingConsent: boolean;
        password: string | null;
        refreshToken: string | null;
        googleId: string | null;
        emailVerified: boolean;
    }>;
    update(id: string, updateUserDto: UpdateUserDto): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            orderNumber: string;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            paymentMethod: string;
            shippingMethod: string;
            shippingAddress: import("@prisma/client/runtime/library").JsonValue;
            trackingNumber: string | null;
            notes: string | null;
            userId: string;
        }[];
        reviews: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.ReviewStatus;
            rating: number;
            userId: string;
            comment: string;
            productId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        zipCode: string;
        country: string;
        status: import(".prisma/client").$Enums.UserStatus;
        dateOfBirth: Date | null;
        gender: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        marketingConsent: boolean;
        password: string | null;
        refreshToken: string | null;
        googleId: string | null;
        emailVerified: boolean;
    }>;
    remove(id: string): Promise<void>;
}

import { OrdersService } from '../services/orders.service';
import { CreateOrderDto } from '../dto/create-order.dto';
import { UpdateOrderDto } from '../dto/update-order.dto';
export declare class OrdersController {
    private readonly ordersService;
    constructor(ordersService: OrdersService);
    create(createOrderDto: CreateOrderDto): Promise<{
        vendorOrders: ({
            vendor: {
                id: string;
                name: string;
                description: string | null;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                phone: string;
                website: string | null;
                address: string;
                city: string;
                state: string;
                zipCode: string;
                country: string;
                businessType: string | null;
                taxId: string | null;
                isVerified: boolean;
                status: import(".prisma/client").$Enums.VendorStatus;
                rating: number;
                reviewCount: number;
                logo: string | null;
                location: string | null;
            };
            items: {
                id: string;
                productId: string;
                price: number;
                sku: string | null;
                quantity: number;
                orderId: string;
                vendorOrderId: string | null;
            }[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.OrderStatus;
            commissionRate: number;
            total: number;
            shippingCost: number;
            subtotal: number;
            tax: number;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            vendorId: string;
            orderId: string;
            vendorEarnings: number;
            commissionAmount: number;
        })[];
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            status: import(".prisma/client").$Enums.UserStatus;
            dateOfBirth: Date | null;
            gender: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            marketingConsent: boolean;
            password: string | null;
            refreshToken: string | null;
            googleId: string | null;
            emailVerified: boolean;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            productId: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        orderNumber: string;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
        paymentMethod: string;
        shippingMethod: string;
        shippingAddress: import("@prisma/client/runtime/library").JsonValue;
        trackingNumber: string | null;
        notes: string | null;
        userId: string;
    }>;
    findAll(): Promise<({
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            status: import(".prisma/client").$Enums.UserStatus;
            dateOfBirth: Date | null;
            gender: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            marketingConsent: boolean;
            password: string | null;
            refreshToken: string | null;
            googleId: string | null;
            emailVerified: boolean;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            productId: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        orderNumber: string;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
        paymentMethod: string;
        shippingMethod: string;
        shippingAddress: import("@prisma/client/runtime/library").JsonValue;
        trackingNumber: string | null;
        notes: string | null;
        userId: string;
    })[]>;
    getStats(): Promise<{
        totalOrders: number;
        pendingOrders: number;
        shippedOrders: number;
        deliveredOrders: number;
        cancelledOrders: number;
    }>;
    getRevenueTrends(): Promise<any[]>;
    getSalesByCategory(): Promise<{
        name: string;
        value: number;
        amount: number;
    }[]>;
    getUserOrders(req: any): Promise<({
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            status: import(".prisma/client").$Enums.UserStatus;
            dateOfBirth: Date | null;
            gender: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            marketingConsent: boolean;
            password: string | null;
            refreshToken: string | null;
            googleId: string | null;
            emailVerified: boolean;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            productId: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        orderNumber: string;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
        paymentMethod: string;
        shippingMethod: string;
        shippingAddress: import("@prisma/client/runtime/library").JsonValue;
        trackingNumber: string | null;
        notes: string | null;
        userId: string;
    })[]>;
    findOne(id: string): Promise<{
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            status: import(".prisma/client").$Enums.UserStatus;
            dateOfBirth: Date | null;
            gender: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            marketingConsent: boolean;
            password: string | null;
            refreshToken: string | null;
            googleId: string | null;
            emailVerified: boolean;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            productId: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        orderNumber: string;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
        paymentMethod: string;
        shippingMethod: string;
        shippingAddress: import("@prisma/client/runtime/library").JsonValue;
        trackingNumber: string | null;
        notes: string | null;
        userId: string;
    }>;
    update(id: string, updateOrderDto: UpdateOrderDto): Promise<{
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
            status: import(".prisma/client").$Enums.UserStatus;
            dateOfBirth: Date | null;
            gender: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            marketingConsent: boolean;
            password: string | null;
            refreshToken: string | null;
            googleId: string | null;
            emailVerified: boolean;
        };
        items: ({
            product: {
                id: string;
                name: string;
                description: string;
                isActive: boolean;
                isFeatured: boolean;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                reviewCount: number;
                price: number;
                originalPrice: number | null;
                brand: string;
                images: import("@prisma/client/runtime/library").JsonValue | null;
                specifications: import("@prisma/client/runtime/library").JsonValue | null;
                availability: import(".prisma/client").$Enums.ProductAvailability;
                stockQuantity: number;
                sku: string | null;
                weight: number | null;
                dimensions: string | null;
                vendorId: string;
                categoryId: string;
                soldCount: number;
            };
        } & {
            id: string;
            productId: string;
            price: number;
            sku: string | null;
            quantity: number;
            orderId: string;
            vendorOrderId: string | null;
        })[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.OrderStatus;
        total: number;
        shippingCost: number;
        subtotal: number;
        tax: number;
        orderNumber: string;
        paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
        paymentMethod: string;
        shippingMethod: string;
        shippingAddress: import("@prisma/client/runtime/library").JsonValue;
        trackingNumber: string | null;
        notes: string | null;
        userId: string;
    }>;
    remove(id: string): Promise<void>;
}
